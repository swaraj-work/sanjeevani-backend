# Use the official PHP image with Apache, version 8.2
# This image comes with Apache pre-configured to work with PHP-FPM,
# making it a good base for web applications.
FROM php:8.2-apache

# Set the working directory inside the container
# This is where your application files will reside.
WORKDIR /var/www/html

# Install system dependencies for PHP extensions and Composer
RUN apt-get update && apt-get install -y \
    libcurl4-openssl-dev \
    pkg-config \
    zip \
    unzip \
    git \
    libonig-dev \
    libzip-dev

# Install PHP extensions required for the application
RUN docker-php-ext-install \
    mysqli \
    pdo_mysql \
    curl \
    mbstring \
    opcache

# Enable Apache modules
RUN a2enmod rewrite headers

# Install Composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Copy composer files first to leverage Docker cache
COPY composer.json composer.lock* ./

# Install dependencies
RUN composer install --no-scripts --no-autoloader

# Copy the rest of the application
COPY . .

# Generate optimized autoloader
RUN composer dump-autoload --optimize

# Set correct permissions for Apache
RUN chown -R www-data:www-data /var/www/html

# Expose port 80. This is the standard HTTP port Apache listens on,
# and Render.com requires this to properly route external traffic to your service.
EXPOSE 80

# The base 'php:8.2-apache' image automatically sets up Apache to run,
# so you usually don't need a CMD instruction unless you have custom startup scripts.
CMD ["apache2-foreground"]